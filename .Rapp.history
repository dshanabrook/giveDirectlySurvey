rm(ls="")
rm(list = ls())
library(quanteda)#
library(readtext)#
library(SnowballC)#
library(wordcloud)#
setwd("~/ShinyApps/giveDirectly")#
data <- read.csv("basicIncome.csv", as.is=T, header=F)#
questions <- data[1,]#
questions <- tolower(questions)#
questions <- paste(questions, sep=" ", collapse=" ") #
questions <- strsplit(questions,split=" ")#
questions <- unlist(questions)
library(quanteda)#
library(readtext)#
library(SnowballC)#
library(wordcloud)#
setwd("~/ShinyApps/giveDirectly")#
data <- read.csv("basicIncome.csv", as.is=T, header=F)#
questions <- data[1,]#
questions <- tolower(questions)#
questions <- paste(questions, sep=" ", collapse=" ") #
questions <- strsplit(questions,split=" ")#
questions <- unlist(questions)#
data <- data[-1,]#
names(data) <- c("name","age","biggestDifference","familyInteract","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")#
data$trustPaymentsTemp <- data$trustPayments=="Yes"#
data[data$trustPayments=="Doesn't know or prefers not to say",]$trustPaymentsTemp <- NA#
data$trustPayments <- data$trustPaymentsTemp#
#
data$familyInteractTemp <- data$familyInteractL=="Yes"#
data[data$familyInteractL=="Doesn't know or prefers not to say",]$familyInteractTemp <- NA#
data$familyInteractL <- data$familyInteractTemp #
data <- subset(data, select=-c(familyInteractTemp, trustPaymentsTemp))#
#
dataOpen <- subset(data, select=-c(name, age, familyInteract,familyInteractL, howLongPayments, trustPayments))#
corpusQ[]$content#
corpusQ <- Corpus(VectorSource(questions))#
corpusQ <- tm_map(corpusQ,  content_transformer(tolower))#
corpusQ <- tm_map(corpusQ, removeWords,stopwords("en"))#
corpusQ <- tm_map(corpusQ, removePunctuation)#
avoidWords <- c("life","biggest","difference","daily","now","can","will","since","able")#
namesInCorpus<- names(dataOpen)#
corpus <- Corpus(VectorSource(dataOpen))#
corpusD <- tm_map(corpus,  content_transformer(tolower))#
corpusD <- tm_map(corpusD, removeWords,stopwords("en"))#
corpusD <- tm_map(corpusD, removeWords, corpusQ[]$content)#
#
corpusD <- tm_map(corpusD, removePunctuation)#
#
corpusD[1]$content#
#
open <- data.frame(text=get("content",corpusD))#
row.names(open) <- namesInCorpus#
wc <- wordcloud(open[3,])
avoidWords <- c("life","biggest","difference","daily","now","can","will","since","able")#
namesInCorpus<- names(dataOpen)#
corpus <- Corpus(VectorSource(dataOpen))#
#
corpusQ <- Corpus(VectorSource(questions))#
corpusQ <- tm_map(corpusQ,  content_transformer(tolower))#
corpusQ <- tm_map(corpusQ, removeWords,stopwords("en"))#
corpusQ <- tm_map(corpusQ, removePunctuation)
corpusD <- tm_map(corpus,  content_transformer(tolower))#
corpusD <- tm_map(corpusD, removeWords,stopwords("en"))#
corpusD <- tm_map(corpusD, removeWords, corpusQ[]$content)#
#
corpusD <- tm_map(corpusD, removePunctuation)
open <- data.frame(text=get("content",corpusD))
row.names(open) <- namesInCorpus
wc <- wordcloud(open[3,])
class(wc)
help(worldcloud)
data$trustPaymentsTemp
data <- read.csv("./data/basicIncome.csv", as.is=T, header=F)#
questions <- data[1,]#
questions <- tolower(questions)#
questions <- paste(questions, sep=" ", collapse=" ") #
questions <- strsplit(questions,split=" ")#
questions <- unlist(questions)#
data <- data[-1,]#
names(data) <- c("name","age","biggestDifference","familyInteract","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")
data$trustPayments=="Yes"
data <- read.csv("./data/basicIncome.csv", as.is=T, header=F)
data <- read.csv("basicIncome.csv", as.is=T, header=F)#
questions <- data[1,]#
questions <- tolower(questions)#
questions <- paste(questions, sep=" ", collapse=" ") #
questions <- strsplit(questions,split=" ")#
questions <- unlist(questions)#
data <- data[-1,]#
names(data) <- c("name","age","biggestDifference","familyInteract","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")
dataField <- data$trustPayments
dataField[datafield=="Yes"] == T
dataField[dataField =="Yes"] <- T
dataField[dataField =="Yes"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- NA
dataField[dataField =="Yes"] <- T#
	dataField[dataField =="No"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- NA
dataField
dataField <- as.logical(dataField)
summary(dataField)
changeYesNoToTFNA <- function(dataField){#
	dataField[dataField =="Yes"] <- T#
	dataField[dataField =="No"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- NA#
	return(as.logical(dataField))#
}
summary(data$familyInteract)
data$familyInteract
data$familyInteract <- changeYesNoToTFNA(data$familyInteract)
data$howLongPayments
summary(data)
help(read.csv)
data <- read.csv("./data/basicIncome.csv", stringsAsFactors=F, header=F)
setwd("~/ShinyApps/giveDirectly")
data <- read.csv("./basicIncome.csv", stringsAsFactors=F, header=F)
data$age <- as.numeric(age)
data <- read.csv("./data/basicIncome.csv", as.is=T, header=F)#
questions <- getQuestions(data)#
data <- data[-1,]#
#
names(data) <- c("name","age","biggestDifference","familyInteract","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")#
#
changeYesNoToTFNA <- function(dataField){#
	dataField[dataField =="Yes"] <- T#
	dataField[dataField =="No"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- NA#
	return(as.logical(dataField))#
}#
#
data$trustPayments <- changeYesNoToTFNA(data$trustPayments)#
data$familyInteractL <- changeYesNoToTFNA(data$familyInteractL)#
data$age <- as.numeric(data$age)#
data$howLongPayments <- as.numeric(data$howLongPayments)
getQuestions <- function(data) {#
	questions <- data[1,]#
	questions <- tolower(questions)#
	questions <- paste(questions, sep=" ", collapse=" ") #
	questions <- strsplit(questions,split=" ")#
	questions <- unlist(questions)#
	return(questions)#
	}
data <- read.csv("./basicIncome.csv", as.is=T, header=F)
data <- data[-1,]#
#
names(data) <- c("name","age","biggestDifference","familyInteract","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")#
#
changeYesNoToTFNA <- function(dataField){#
	dataField[dataField =="Yes"] <- T#
	dataField[dataField =="No"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- NA#
	return(as.logical(dataField))#
}#
#
data$trustPayments <- changeYesNoToTFNA(data$trustPayments)#
data$familyInteractL <- changeYesNoToTFNA(data$familyInteractL)
data$age <- as.numeric(data$age)
data[,1]
data[,2]
data[,3]
data[,4]
data[,5]
data[,6]
data[,7]
data[,8]
data[,9]
data[,10]
data[,11]
names(data)
data$howLongPayments <- as.numeric(data$howLongPayments)
data[,12]
data[,13]
data[,14]
data[,15]
library(tm)#
library(wordcloud)#
library(memoise)#
getQuestions <- function(data) {#
	questions <- data[1,]#
	questions <- tolower(questions)#
	questions <- paste(questions, sep=" ", collapse=" ") #
	questions <- strsplit(questions,split=" ")#
	questions <- unlist(questions)#
	return(questions)#
	}#
data <- read.csv("./basicIncome.csv", as.is=T, header=F)#
questions <- getQuestions(data)#
data <- data[-1,]#
#
names(data) <- c("name","age","biggestDifference","familyInteract","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")#
#
changeYesNoToTFNA <- function(dataField){#
	dataField[dataField =="Yes"] <- T#
	dataField[dataField =="No"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- NA#
	return(as.logical(dataField))#
}#
#
data$trustPayments <- changeYesNoToTFNA(data$trustPayments)#
data$familyInteractL <- changeYesNoToTFNA(data$familyInteractL)#
data$age <- as.numeric(data$age)#
data$howLongPayments <- as.numeric(data$howLongPayments)#
dataOpen <- subset(data, select=-c(familyInteract)
library(tm)#
library(wordcloud)#
library(memoise)#
getQuestions <- function(data) {#
	questions <- data[1,]#
	questions <- tolower(questions)#
	questions <- paste(questions, sep=" ", collapse=" ") #
	questions <- strsplit(questions,split=" ")#
	questions <- unlist(questions)#
	return(questions)#
	}#
data <- read.csv("./basicIncome.csv", as.is=T, header=F)#
questions <- getQuestions(data)#
data <- data[-1,]#
#
names(data) <- c("name","age","biggestDifference","familyInteract","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")#
#
changeYesNoToTFNA <- function(dataField){#
	dataField[dataField =="Yes"] <- T#
	dataField[dataField =="No"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- NA#
	return(as.logical(dataField))#
}#
#
data$trustPayments <- changeYesNoToTFNA(data$trustPayments)#
data$familyInteractL <- changeYesNoToTFNA(data$familyInteractL)#
data$age <- as.numeric(data$age)#
data$howLongPayments <- as.numeric(data$howLongPayments)#
dataOpen <- subset(data, select=-c(familyInteract))
dataOpen
numResponses <- nrows(data)
numResponses <- numrow(data)
numResponses <- nrow(data)
numResponses
corpus <- Corpus(VectorSource(data))
corpusD <- tm_map(corpus,  content_transformer(tolower))#
	corpusD <- tm_map(corpusD, removeWords,stopwords("en"))#
	corpusD <- tm_map(corpusD, removeWords, corpusQ[]$content)#
	corpusD <- tm_map(corpusD, removePunctuation)#
	open <- data.frame(text=get("content",corpusD))
row.names(open) <- names(data)
wordcloud(open[3,])
library(shiny)#
library(shinyapps)#
setwd("~/ShinyApps")#
runApp("giveDirectly")
install.packages("shiny")
install.packages(htmltools)
install.packages("htmltools")
remove.packages("htmltools")
install.packages("htmltools", dependencies=
T)
install.packages("htmltools", dependancies=T)
install.packages("htmltools", dependencies=T)
library(htmltools)
install.packages(Rcpp)
install.packages("Rcpp")
install.packages("shiny", dependencies=T)
getCorpusQ <- function(questions){	#
	corpusQ <- Corpus(VectorSource(questions))#
	corpusQ <- tm_map(corpusQ,  content_transformer(tolower))#
	corpusQ <- tm_map(corpusQ, removeWords,stopwords("en"))#
	corpusQ <- tm_map(corpusQ, removePunctuation)#
	return(corpusQ)#
	}
library(SnowballC)#
library(shiny)#
library(tm)#
library(wordcloud)#
#
doDebug <- T#
#
getQuestions <- function(data, questionNumber=NULL) {#
	questions <- data[1,questionNumber]#
	questions <- tolower(questions)#
	questions <- paste(questions, sep=" ", collapse=" ") #
	questions <- strsplit(questions,split=" ")#
	questions <- unlist(questions)#
	return(questions)#
	}#
#
getCorpusQ <- function(questions){	#
	corpusQ <- Corpus(VectorSource(questions))#
	corpusQ <- tm_map(corpusQ,  content_transformer(tolower))#
	corpusQ <- tm_map(corpusQ, removeWords,stopwords("en"))#
	corpusQ <- tm_map(corpusQ, removePunctuation)#
	return(corpusQ)#
	}	#
changeYesNoToTFNA <- function(dataField){#
	dataField[dataField =="Doesn't know or prefers not to say"] <- "no response"#
	return(dataField)#
}#
#
transformCorpus <- function(corpusQ, noNumbers, noQuestions, doNotKeepWords = "") {#
#
	corpusD <- tm_map(corpus, content_transformer(tolower))#
	if (noNumbers) #
		corpusD <- tm_map(corpusD, removeNumbers)#
	if (noQuestions) #
		corpusD <- tm_map(corpusD, removeWords, corpusQ[]$content)	#
	corpusD <- tm_map(corpusD, removeWords,myStopwords)	#
	corpusD <- tm_map(corpusD, removePunctuation)#
	corpusDF <- data.frame(text = get("content", corpusD))#
	row.names(corpusDF) <- columnHeaders#
	return(corpusDF)#
}#
exceptions   <- c("no")#
myStopwords <- setdiff(stopwords("en"), "exceptions")#
data <- read.csv("./giveDirectly/data/basicIncome.csv", as.is=T, header=F)#
data <- data[,-4]#
theQuestions <- data[1,]#
names(theQuestions) <- data[1,]#
data <- data[-1,]#
#
names(data) <- c("name","age","biggestDifference","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")#
data$trustPayments <- changeYesNoToTFNA(data$trustPayments)#
data$familyInteractL <- changeYesNoToTFNA(data$familyInteractL)#
columnHeaders <- names(data)#
numResponses <- nrow(data)#
corpus <- Corpus(VectorSource(data))#
#
if (doDebug){#
	theQuestion <- theQuestions[3]#
	noNumbers <- F#
	noQuestions <- F#
	questionNumber <- match(theQuestion, theQuestions)#
	corpusQ <- getCorpusQ(getQuestions(data,questionNumber))#
	corpusDF <- transformCorpus(corpusQ,noNumbers, noQuestions)#
	wordcloud(corpusDF[questionNumber, ])#
	}
corpusQ
library(shiny)
setwd("~/ShinyApps")
data <- read.csv("~/ShinyApps/giveDirectly/data/basicIncome.csv", as.is=T, header=F)
data
questionNumber=NULL
questions <- data[1,questionNumber]
data[1,]
data <- read.csv("~/ShinyApps/giveDirectly/data/basicIncome.csv", as.is=T, header=F)#
data <- data[,-4]#
theQuestions <- data[1,]
names(theQuestions) <- data[1,]
theQuestions
getQuestions <- function(data, questionNumber=NULL) {#
	questions <- data[1,]#
	questions <- tolower(questions)#
	questions <- paste(questions, sep=" ", collapse=" ") #
	questions <- strsplit(questions,split=" ")#
	questions <- unlist(questions)#
	return(questions)#
	}
questions <- getQuestions(data)
questions <- theQuestions[1,questionNumber]
questionNumber
data <- read.csv("~/ShinyApps/giveDirectly/data/basicIncome.csv", as.is=T, header=F)#
data <- data[,-4]#
theQuestions <- data[1,]#
names(theQuestions) <- data[1,]#
questions <- getQuestions(data, 3)
getQuestions <- function(data, questionNumber=NULL) {#
	questions <- theQuestions[1,questionNumber]#
	questions <- tolower(questions)#
	questions <- paste(questions, sep=" ", collapse=" ") #
	questions <- strsplit(questions,split=" ")#
	questions <- unlist(questions)#
	return(questions)#
	}
questions <- getQuestions(data, 3)
questions
corpusQ <- getCorpusQ(questions)
corpusQ[]$content
data$trustPayments <- changeYesNoToTFNA(data$trustPayments)
data$trustPayments
data$familyInteractL <- changeYesNoToTFNA(data$familyInteractL)
data$familyInteractL
help(wordcloud)
help(wordcloud_rep)
??wordcloud_rep
runApp("giveDirectly")
help(textInput)
data$age
library(SnowballC)#
library(shiny)#
library(tm)#
library(wordcloud)#
#
doDebug <- F#
#
getQuestions <- function(data, questionNumber=NULL) {#
	questions <- theQuestions[1,questionNumber]#
	questions <- tolower(questions)#
	questions <- paste(questions, sep=" ", collapse=" ") #
	questions <- strsplit(questions,split=" ")#
	questions <- unlist(questions)#
	return(questions)#
	}#
#
getCorpusQ <- function(questions){	#
	corpusQ <- Corpus(VectorSource(questions))#
	corpusQ <- tm_map(corpusQ,  content_transformer(tolower))#
#
	corpusQ <- tm_map(corpusQ, removePunctuation)#
	return(corpusQ)#
	}	#
changeYesNoToTFNA <- function(dataField){#
	dataField[dataField =="Yes"] <- T#
	dataField[dataField =="No"] <- F#
	dataField[dataField =="Doesn't know or prefers not to say"] <- "NA"#
	dataField <- as.logical(dataField)#
	return(dataField)#
}#
#
transformCorpus <- function(corpusQ, noNumbers, noQuestions, wordsToExclude = "") {#
#
	corpusD <- tm_map(corpus, content_transformer(tolower))#
	if (noNumbers) #
		corpusD <- tm_map(corpusD, removeNumbers)#
	if (noQuestions) {#
		corpusQ[]$content#
		print("remove questions")#
		corpusD <- tm_map(corpusD, removeWords, corpusQ[]$content)	#
		}#
	corpusD <- tm_map(corpusD, removeWords, wordsToExclude)#
	corpusD <- tm_map(corpusD, removeWords,myStopwords)	#
	corpusD <- tm_map(corpusD, removePunctuation)#
	corpusDF <- data.frame(text = get("content", corpusD))#
	row.names(corpusDF) <- columnHeaders#
	return(corpusDF)#
}#
exceptions   <- c("no")#
myStopwords <- setdiff(stopwords("en"), "exceptions")#
data <- read.csv("~/ShinyApps/giveDirectly/data/basicIncome.csv", as.is=T, header=F)#
data <- data[,-4]#
theQuestions <- data[1,]#
names(theQuestions) <- data[1,]#
data <- data[-1,]#
#
names(data) <- c("name","age","biggestDifference","familyInteractL","howInteract","howSpent","forProjects","changeFeelWork","whyToIndividual","problemToIndividual","howLongPayments","trustPayments","trustAffectedLifePlans")#
data$trustPayments <- changeYesNoToTFNA(data$trustPayments)#
data$familyInteractL <- changeYesNoToTFNA(data$familyInteractL)#
data$age <- as.numeric(data$age)#
columnHeaders <- names(data)#
numResponses <- nrow(data)#
corpus <- Corpus(VectorSource(data))#
#
if (F){#
	theQuestion <- theQuestions[3]#
	noNumbers <- F#
	noQuestions <- F#
	questionNumber <- match(theQuestion, theQuestions)#
	corpusQ <- getCorpusQ(getQuestions(data,questionNumber))#
	corpusDF <- transformCorpus(corpusQ,noNumbers, noQuestions)#
	wordcloud(corpusDF[questionNumber, ])#
	}
theQuestion <- theQuestions[3]
noNumbers <- F
noQuestions <- F
questionNumber <- match(theQuestion, theQuestions)
corpusQ <- getCorpusQ(getQuestions(data,questionNumber))
wordsToExclude <- "none"
corpusDF <- transformCorpus(corpusQ,noNumbers, noQuestions,wordsToExclude)
corpusDF
myStopwords
class(wordsToExclude)
class(myStopWords)
class(myStopwords)
dim(wordsToExclude)
dim(myStopWords)
dim(myStopwords)
len(myStopwds)
length(myStopwds)
length(myStopwords)
lenght(wordsToExclude)
library(shiny)#
setwd("~/ShinyApps")#
runApp("giveDirectly")
